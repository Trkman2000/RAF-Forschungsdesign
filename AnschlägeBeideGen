---
title: "RAF Gesamtnetzwerk"
author: "Hannah Bauer"
date: "9 3 2020"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
# Skript Erstellung einfaches Netzwerk
# lädt igraph Bibliothek (ggf. vorher installieren)
library(igraph)
# erhöht das limit auf 10000000
options(max.print=1000000)
# liest die Edgelist als "el" ein
el <- read.csv("https://raw.githubusercontent.com/ca048/RAF-Forschungsdesign/master/edges.csv", header=T, as.is=T, sep = ",")
# liest die Nodelist mit den Namen ein
nodes <- read.csv("https://raw.githubusercontent.com/ca048/RAF-Forschungsdesign/master/nodes.csv", header=T, as.is=T, sep = ",")
# Zwischenschritt verbindet die Edge- und Nodelist zu einer Matrix
raf_matrix <- as.matrix(el)
# zeigt die Matrix an
raf_matrix
# generiert ein igraph-Objekt (dataframe) aus der Matrix, das ungerichtet ist (directed = false)
raf <- graph_from_data_frame(d=raf_matrix, vertices=nodes, directed=FALSE)
# ruft unser neues igraph-Objekt auf
raf
# generiert die Standard-Visualisierung des Netzwerks
#plot(raf)
#degree <- degree(raf)
#degree
#test, ob Anfangsproblem behoben ist (d.h. alle Nodeattribute eingelesen werden und in die Matrix übernommen wurden)
#list.vertex.attributes(raf)
#Grafisch werden Ereignisse/Aktionen  anders dargestellt als Akteure
V(raf)[V(raf)$type == 1]$shape <- "circle" # Personen als Kreise
V(raf)[V(raf)$type == 2]$shape <- "square" # Aktionen als Quadrate
# einfacher plot
plot(raf,
     layout=layout_nicely,
     main="RAF-Netzwerk")
```
## Teilnetzwerk Anschläge mit Anschlägern gesamt
#dafür: Seletion nach Edge-Attribut relationship=7
```{r multiplex_ex, exercise=TRUE, exercise.lines = 20}

E(raf)[E(raf)$relationship == 7]$color 

plot(raf,
     edge.color="yellow",
     edge.arrow.size=.5,
     vertex.color="red",
     layout=layout_with_kk,
     edge.curved=curve_multiple(raf),
     main="Anschläge und Anschläger",
     sub="139")
```
##Versuch, nur Anschläge der ersten Generation darzustellen
#dafür: Löschen aller Knoten, die nicht zur ersten Generation gehören
```{r delete_vertices, exercise=TRUE, exercise.lines = 15}
library(igraph)
el <- read.csv("https://raw.githubusercontent.com/ca048/RAF-Forschungsdesign/master/edges.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("https://raw.githubusercontent.com/ca048/RAF-Forschungsdesign/master/nodes.csv", header=T, as.is=T, sep = ",")
edgematrix <-as.matrix(el)
raf <- graph_from_data_frame(d=edgematrix, vertices=nodes, directed=T)

list.vertex.attributes(raf)
vertex_attr(raf)$generation

anschlaege_erste_gen <- delete_vertices(raf, V(raf)[generation > "1"]) 
anschlaege_erste_gen
plot(anschlaege_erste_gen, layout=layout_with_kk,
     main="Anschläge erste Generation",
     edge.color="green",
     edge.arrow.size=.5,
     vertex.color="red")
```
#aber: stimmt das so? Wieso hat Carmen Roll schon wieder keine Beziehung zu irgendwem obwohl in EL angegeben?
```{r delete_vertices, exercise=TRUE, exercise.lines = 15}
library(igraph)
el <- read.csv("https://raw.githubusercontent.com/ca048/RAF-Forschungsdesign/master/edges.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("https://raw.githubusercontent.com/ca048/RAF-Forschungsdesign/master/nodes.csv", header=T, as.is=T, sep = ",")
edgematrix <-as.matrix(el)
raf <- graph_from_data_frame(d=edgematrix, vertices=nodes, directed=T)

list.vertex.attributes(raf)
vertex_attr(raf)$generation

anschlaege_zweite_gen <- delete_vertices(raf, V(raf)[generation < "2"])
anschlaege_zweite_gen <- delete_vertices(raf, V(raf)[generation > "2"])
anschlaege_zweite_gen
plot(anschlaege_zweite_gen, layout=layout_with_kk,
     main="Anschläge zweite Generation",
     edge.color="green",
     edge.arrow.size=.5,
     vertex.color="red")
```
#ist halt noch sehr unübersichtlich
